{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/linkingButtons.js","webpack:///./src/components/headerBar.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2__","a","createElement","charSet","rel","href","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","createContext","object","func","ListLink","props","react_default","gatsby_link_default","to","className","styleName","children","linkingButtons","linkingButtons_ListLink","toLocal","text","headerBar"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAIeE,EAAA,0BAEXE,EAAAI,EAAAC,cAACH,EAAA,EAAD,KACIF,EAAAI,EAAAC,cAACF,EAAA,OAAD,KACEH,EAAAI,EAAAC,cAAA,QAAMC,QAAQ,UACdN,EAAAI,EAAAC,cAAA,sCACAL,EAAAI,EAAAC,cAAA,QAAME,IAAI,YAAYC,KAAK,2CAE7BR,EAAAI,EAAAC,cAAA,yBACAL,EAAAI,EAAAC,cAAA,4FACAL,EAAAI,EAAAC,cAAA,qBACAL,EAAAI,EAAAC,cAAA,ucAOAL,EAAAI,EAAAC,cAAA,KAAGG,KAAK,qDAAR,2CACAR,EAAAI,EAAAC,cAAA,sBACAL,EAAAI,EAAAC,cAAA,k7BAYAL,EAAAI,EAAAC,cAAA,qGCpCR,IAAsBI,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIEI,IAAMhB,cAAciB,IAApBC,OAAAC,OAAA,CACLR,WACAC,iBACGA,EAAcQ,OANV,MAUXX,EAAiBY,UAAY,CAC3BV,SAAUW,IAAUC,MAAM,CACxBR,SAAUO,IAAUE,OAAOC,aAC1BA,YAGUhB,0GCbYO,IAAMU,cAAc,IA0CvCJ,IAAUK,OACTL,IAAUE,OAAOC,WAChBH,IAAUM,KACRN,IAAUM,KCtDtB,IAAMC,EAAW,SAAAC,GAAK,OACpBC,EAAAhC,EAAAC,cAAA,WACE+B,EAAAhC,EAAAC,cAACgC,EAAAjC,EAAD,CAAMkC,GAAIH,EAAMG,IACdF,EAAAhC,EAAAC,cAAA,UAAQkC,UAAWJ,EAAMK,WAAYL,EAAMM,aAKlCC,EAAA,SAAAP,GAAK,OAChBC,EAAAhC,EAAAC,cAAA,WACI+B,EAAAhC,EAAAC,cAACsC,EAAD,CAAUL,GAAIH,EAAMS,QAASJ,UAAWL,EAAMK,WAAYL,EAAMU,QCVzDC,EAAA,SAAAX,GAAK,OAChBC,EAAAhC,EAAAC,cAAA,OAAKkC,UAAU,UACXH,EAAAhC,EAAAC,cAACqC,EAAD,CAAgBE,QAAQ,IAAIC,KAAK,OAAOL,UAAU,kBAClDJ,EAAAhC,EAAAC,cAACqC,EAAD,CAAgBE,QAAQ,SAASC,KAAK,QAAQL,UAAU,kBACxDJ,EAAAhC,EAAAC,cAACqC,EAAD,CAAgBE,QAAQ,UAAUC,KAAK,SAASL,UAAU,kBAC1DJ,EAAAhC,EAAAC,cAACqC,EAAD,CAAgBE,QAAQ,YAAYC,KAAK,WAAWL,UAAU,2BCJvD1C,EAAA,WAAAiB,GAAA,IAAG0B,EAAH1B,EAAG0B,SAAH,OACbL,EAAAhC,EAAAC,cAAA,OAAKkC,UAAU,cACbH,EAAAhC,EAAAC,cAACyC,EAAD,CAAQP,UAAU,WAClBH,EAAAhC,EAAAC,cAAA,OAAKkC,UAAU,iBACZE","file":"component---src-pages-projects-js-c41382721a662e153701.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { Helmet } from \"react-helmet\"\n\nexport default () => (\n    \n    <Layout>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>Calvin Smith Projects</title>\n          <link rel=\"canonical\" href=\"https://www.calvinsmith.xyz/projects/\" />\n        </Helmet>\n        <h1>My Projects</h1>\n        <h3>Currently I have two projects on the go, below is a brief description of both:</h3>\n        <h4>Youddit</h4>\n        <p>\n            Youddit is made up of customizable python scripts. \n            These scripts include a reddit web scraper that looks for urls of a selected subreddit. \n            A downloading script is then called that will search each url to look and see if a video is attached to the url, if so the video will be downloaded. \n            Once a whole grouping of videos are downloaded they are randomly compiled into 5 minute compilations. \n            Once the video is created it is uploaded to YouTube.\n        </p>\n        <a href=\"https://github.com/CalvinRossSmith/Youddit-Public\">Click Here to see the Github repository</a>\n        <h4>AutoPlex</h4>\n        <p>\n            AutoPlex uses many different tools such as Filebot, Radarr, Sonarr, PlexDrive, Rclone. \n            These tools are great tools on their own, however have trouble working as one. \n            My goal for this project was to be able to have a fully automated home entertainment setup. \n            The problem was that a lot of storage for automated home entertainment systems is required. \n            With AutoPlex I was able to solve this issue by using Radarr/Sonarr to fetch the latest media. \n            I then was able to upload new legally obtained media in an encrypted format to the cloud using a cron job running Rclone. \n            Once in the cloud the files are renamed and sorted using Filebot. \n            To stream the media I have configured PlexDrive to cache enough of the media on the local machine to view from Plex. \n            All of this is configured on a headless server that has 1tb of local storage. \n            With this solution I now have close to 30tb of encrypted media that can be reached using any plex client.\n        </p>\n        <p>Full write up of how to do this will be posted on my Github soon!</p>\n    </Layout>\n    \n)","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst ListLink = props => (\n  <div>\n    <Link to={props.to}>\n      <button className={props.styleName}>{props.children}</button>\n    </Link>\n  </div>\n)\n\nexport default props => (\n    <div>\n        <ListLink to={props.toLocal} styleName={props.styleName}>{props.text}</ListLink>     \n    </div> \n)\n","import React from \"react\"\nimport LinkingButtons from \"./linkingButtons\"\n\nexport default props => (\n    <div className=\"Header\">\n        <LinkingButtons toLocal=\"/\" text=\"Home\" styleName=\"HeaderButtons\"/>\n        <LinkingButtons toLocal=\"/about\" text=\"About\" styleName=\"HeaderButtons\"/>\n        <LinkingButtons toLocal=\"/resume\" text=\"Resume\" styleName=\"HeaderButtons\"/>\n        <LinkingButtons toLocal=\"/projects\" text=\"Projects\" styleName=\"HeaderButtons\"/>\n        </div> \n)","import React from \"react\"\nimport Header from \"./headerBar\"\nimport \"../styles/global.css\"\n\nexport default ({ children }) => (\n  <div className=\"MainLayout\">\n    <Header className=\"Header\"/>\n    <div className=\"ChildOfChrist\">\n      {children}\n    </div>\n  </div>\n)\n"],"sourceRoot":""}